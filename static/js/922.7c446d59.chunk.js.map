{"version":3,"file":"static/js/922.7c446d59.chunk.js","mappings":"sLAEaA,E,QAAmBC,GAAAA,GAAH,2EAGpB,qBAAGC,MAAkBC,OAAOC,UAA5B,I,SCHIC,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OAAO,UAACN,EAAD,eAAoBM,IAC5B,C,8ICFYC,E,QAAgBN,GAAAA,GAAH,4D,iDCUbO,EAAqB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC7BC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,SAAC,KAAD,UACGF,EAAeG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAApB,OAClB,SAAC,KAAD,WACE,UAAC,KAAD,CAAeC,GAAE,iBAAYH,GAAMI,MAAO,CAAEC,KAAMR,GAAlD,WACE,SAAC,KAAD,WACE,gBACES,IAAKL,EATI,mCAS2BA,EAAcM,EAClDC,IAAKN,EACLO,QAAQ,YAGZ,SAAC,KAAD,UAAaP,QATDF,EADE,KAgBzB,E,oBCaD,EAtCa,WACX,OAA4CU,EAAAA,EAAAA,UAAS,IAArD,eAAOd,EAAP,KAAuBe,EAAvB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,GAAa,GACbE,EAAS,MAHb,UAIuBE,EAAAA,EAAAA,MAJvB,OAIUC,EAJV,OAKIP,EAAkBO,EAAKC,SAL3B,gDAOIJ,EAAS,KAAMtB,SAPnB,yBASIoB,GAAa,GATjB,6EADc,uBAAC,WAAD,wBAadO,EACD,GAAE,IAEHC,QAAQC,IAAI1B,IAEV,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAACF,EAAD,6BACCoB,IACC,SAACtB,EAAA,EAAD,CACEC,QAAO,yDAGVmB,IAAa,SAACW,EAAA,EAAD,KACd,SAAC5B,EAAD,CAAoBC,eAAgBA,QAI3C,C,mMC5CD4B,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAEHR,EAAiB,mCAAG,sGACRO,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,uBACvBP,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBQ,EAAe,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACNJ,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDE,EAApD,iBAAkEC,IAD5D,uBACrBV,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfW,EAAe,mCAAG,WAAO7B,GAAP,yFACNwB,EAAAA,EAAAA,IAAA,iBAAoBxB,EAApB,oBAAkCyB,IAD5B,uBACrBP,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfY,EAAY,mCAAG,WAAO9B,GAAP,yFACHwB,EAAAA,EAAAA,IAAA,iBAAoBxB,EAApB,4BAA0CyB,IADvC,uBAClBP,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZa,EAAe,mCAAG,WAAO/B,GAAP,yFACNwB,EAAAA,EAAAA,IAAA,iBAAoBxB,EAApB,4BAA0CyB,IADpC,uBACrBP,EADqB,EACrBA,KACRG,QAAQC,IAAIJ,GAFiB,kBAGtBA,GAHsB,2CAAH,qD","sources":["components/MovieError/MovieError.styled.js","components/MovieError/MovieError.jsx","pages/Home/Home.styled.js","components/TrendingMoviesList/TrendingMoviesList.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledMovieError = styled.h2`\ntext-align: center;\nmargin: 0 auto;\ncolor: ${({ theme }) => theme.colors.errorColor};\n`;\n","import { StyledMovieError } from './MovieError.styled';\n\nexport const MovieError = ({ message }) => {\n  return <StyledMovieError> {message}</StyledMovieError>;\n};\n","import styled from 'styled-components';\n\nexport const StyledHeading = styled.h1`\ntext-align: center;\nmargin: 20px;\n`;\n","import { useLocation } from 'react-router-dom';\n\nimport {\n  MovieItem,\n  MovieList,\n  MovieThumb,\n  MovieTitle,\n  MovieItemLink,\n} from 'components/SharedLayout/SharedLayout.styled';\n\nimport noImage from '../../images//no-image.jpg';\n\nexport const TrendingMoviesList = ({ trendingMovies }) => {\n  const location = useLocation();\n\n  const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <MovieList>\n      {trendingMovies.map(({ id, poster_path, title }) => (\n        <MovieItem key={id}>\n          <MovieItemLink to={`movies/${id}`} state={{ from: location }}>\n            <MovieThumb>\n              <img\n                src={poster_path ? IMAGE_BASE_URL + poster_path : noImage}\n                alt={title}\n                loading=\"lazy\"\n              />\n            </MovieThumb>\n            <MovieTitle>{title}</MovieTitle>\n          </MovieItemLink>\n        </MovieItem>\n      ))}\n    </MovieList>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getTrendingMovies } from 'services/api';\n\nimport { StyledHeading } from './Home.styled';\n\nimport { Container, Section } from 'components/App/App.styled';\nimport { TrendingMoviesList } from 'components/TrendingMoviesList';\nimport { MovieError } from 'components/MovieError';\nimport { Loader } from 'components/Loader';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function saveTrendigMovies() {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const data = await getTrendingMovies();\n        setTrendingMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    saveTrendigMovies();\n  }, []);\n\n  console.log(trendingMovies);\n  return (\n    <Section>\n      <Container>\n        <StyledHeading>Trending today</StyledHeading>\n        {error && (\n          <MovieError\n            message={`Sorry, something went wrong. Please try again later!`}\n          />\n        )}\n        {isLoading && <Loader />}\n        <TrendingMoviesList trendingMovies={trendingMovies} />\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '3b3588da04245c6a18fc17ccb8868599';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data;\n}\n\nexport const getSearchMovies = async (query, page = 1) => {\n  const { data } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`);\n  return data;\n}\n\nexport const getMovieDetails = async (id) => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n}\n\nexport const getMovieCast = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n}\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  console.log(data);\n  return data;\n}\n"],"names":["StyledMovieError","styled","theme","colors","errorColor","MovieError","message","StyledHeading","TrendingMoviesList","trendingMovies","location","useLocation","map","id","poster_path","title","to","state","from","src","noImage","alt","loading","useState","setTrendingMovies","isLoading","setIsLoading","error","setError","useEffect","getTrendingMovies","data","results","saveTrendigMovies","console","log","Loader","axios","API_KEY","getSearchMovies","query","page","getMovieDetails","getMovieCast","getMovieReviews"],"sourceRoot":""}
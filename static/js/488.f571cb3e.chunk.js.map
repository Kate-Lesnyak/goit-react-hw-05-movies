{"version":3,"file":"static/js/488.f571cb3e.chunk.js","mappings":"sLAEaA,E,QAAmBC,GAAAA,GAAH,2EAGpB,qBAAGC,MAAkBC,OAAOC,UAA5B,I,SCHIC,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OAAO,UAACN,EAAD,eAAoBM,IAC5B,C,oKCFYC,EAAoBN,EAAAA,GAAAA,GAAH,4EAGtB,qBAAGC,MAAkBM,QAAQ,EAA7B,IAGKC,EAAoBR,EAAAA,GAAAA,GAAH,4EAGtB,qBAAGC,MAAkBM,QAAQ,EAA7B,I,SCTKE,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,SAACJ,EAAD,UACGI,EAAQC,OAAS,EAChBD,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,UAACP,EAAD,YACE,0BACE,mCADF,IACkBM,MAElB,0BACE,oCADF,IACmBC,OALGF,EADd,KAWZ,wBACE,+FAOT,E,oBCsBD,EAvCgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQR,GAAOS,EAAAA,EAAAA,MAAPT,GAmBR,OAjBAU,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIJ,GAAa,GACbE,EAAS,MAHb,UAIuBG,EAAAA,EAAAA,IAAgBX,GAJvC,OAIUY,EAJV,OAKIR,EAAWQ,EAAKC,SAChBC,QAAQC,IAAIH,EAAKC,SANrB,kDAQIL,EAAS,KAAMhB,SARnB,yBAUIc,GAAa,GAVjB,8EADc,uBAAC,WAAD,wBAcdU,EACD,GAAE,CAAChB,KAGF,gCACGO,IACC,SAAChB,EAAA,EAAD,CACEC,QAAO,yBAAoBQ,EAApB,6CAIVK,IAAa,SAACY,EAAA,EAAD,KAEd,SAACrB,EAAD,CAAaC,QAASA,MAG3B,C,mMC3CDqB,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,uBACvBP,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBS,EAAe,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACNL,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDG,EAApD,iBAAkEC,IAD5D,uBACrBX,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfY,EAAe,mCAAG,WAAOxB,GAAP,yFACNkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,oBAAkCmB,IAD5B,uBACrBP,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfa,EAAY,mCAAG,WAAOzB,GAAP,yFACHkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,4BAA0CmB,IADvC,uBAClBP,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZD,EAAe,mCAAG,WAAOX,GAAP,yFACNkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,4BAA0CmB,IADpC,uBACrBP,EADqB,EACrBA,KACRE,QAAQC,IAAIH,GAFiB,kBAGtBA,GAHsB,2CAAH,qD","sources":["components/MovieError/MovieError.styled.js","components/MovieError/MovieError.jsx","components/Reviews/ReviewsList/ReviewsList.styled.js","components/Reviews/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledMovieError = styled.h2`\ntext-align: center;\nmargin: 0 auto;\ncolor: ${({ theme }) => theme.colors.errorColor};\n`;\n","import { StyledMovieError } from './MovieError.styled';\n\nexport const MovieError = ({ message }) => {\n  return <StyledMovieError> {message}</StyledMovieError>;\n};\n","import styled from \"styled-components\";\n\nexport const StyledReviewsList = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: ${(({ theme }) => theme.spacing(4))};\n`;\n\nexport const StyledReviewsItem = styled.li`\ndisplay: flex;\nflex-direction: column;\ngap: ${(({ theme }) => theme.spacing(1))};\n`;\n\n","import { StyledReviewsList, StyledReviewsItem } from './ReviewsList.styled';\n\nexport const ReviewsList = ({ reviews }) => {\n  return (\n    <StyledReviewsList>\n      {reviews.length > 0 ? (\n        reviews.map(({ id, author, content }) => (\n          <StyledReviewsItem key={id}>\n            <p>\n              <b>Author:</b> {author}\n            </p>\n            <p>\n              <b>Content:</b> {content}\n            </p>\n          </StyledReviewsItem>\n        ))\n      ) : (\n        <p>\n          <b>\n            Sorry, but at the moment there are no reviews for this movie. :(\n          </b>\n        </p>\n      )}\n    </StyledReviewsList>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api';\nimport { ReviewsList } from './ReviewsList';\n\nimport { Loader } from 'components/Loader';\nimport { MovieError } from 'components/MovieError';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function saveMovieReviews() {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const data = await getMovieReviews(id);\n        setReviews(data.results);\n        console.log(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    saveMovieReviews();\n  }, [id]);\n\n  return (\n    <>\n      {error && (\n        <MovieError\n          message={`Sorry, but the ${id} was not found. Please try again later!`}\n        />\n      )}\n\n      {isLoading && <Loader />}\n\n      <ReviewsList reviews={reviews} />\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '3b3588da04245c6a18fc17ccb8868599';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data;\n}\n\nexport const getSearchMovies = async (query, page = 1) => {\n  const { data } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`);\n  return data;\n}\n\nexport const getMovieDetails = async (id) => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n}\n\nexport const getMovieCast = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n}\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  console.log(data);\n  return data;\n}\n"],"names":["StyledMovieError","styled","theme","colors","errorColor","MovieError","message","StyledReviewsList","spacing","StyledReviewsItem","ReviewsList","reviews","length","map","id","author","content","useState","setReviews","isLoading","setIsLoading","error","setError","useParams","useEffect","getMovieReviews","data","results","console","log","saveMovieReviews","Loader","axios","API_KEY","getTrendingMovies","getSearchMovies","query","page","getMovieDetails","getMovieCast"],"sourceRoot":""}